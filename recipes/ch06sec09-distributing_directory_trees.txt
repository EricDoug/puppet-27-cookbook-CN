[[ch06sec09]]
=== {Recipe609}

[quote, Saying,]
To understand recursion, you must first understand recursion.

当你需要使用 Puppet 分发一批位于同一目录下的多个文件时，
就应该考虑使用文件资源的递归特性来替代逐个文件的分发。
如果你在一个目录上设置了 +recurse+ 参数，
Puppet 会复制此目录及其子目录中的所有文件到节点目录，例如：

----
file { "/usr/lib/nagios/plugins/custom":
    source  => "puppet:///modules/nagios/plugins",
    require => Package["nagios-plugins"],
    recurse => true,
}
----

==== {Howtodoit}

1. 在 Puppet 仓库中的适当位置创建如下的目录树：
+
....
# mkdir /etc/puppet/modules/admin/files/tree
# mkdir /etc/puppet/modules/admin/files/tree/a
# mkdir /etc/puppet/modules/admin/files/tree/b
# mkdir /etc/puppet/modules/admin/files/tree/c
# mkdir /etc/puppet/modules/admin/files/tree/a/1
....

2. 添加如下代码到你的配置清单：
+
----
file { "/tmp/tree":
    source  => "puppet:///modules/admin/tree",
    recurse => true,
}
----

3. 运行 Puppet：
+
....
# puppet agent --test
info: Retrieving plugin
info: Caching catalog for cookbook.bitfieldconsulting.com
info: Applying configuration version '1304768523'

notice: /Stage[main]//Node[cookbook]/File[/tmp/tree]/ensure:
created

notice: /File[/tmp/tree/a]/ensure: created
notice: /File[/tmp/tree/a/1]/ensure: created
notice: /File[/tmp/tree/b]/ensure: created
notice: /File[/tmp/tree/c]/ensure: created
notice: Finished catalog run in 1.25 seconds
....

==== {Howitworks}

如果一个 +file+ 资源上设置了 +recurse+ 参数，而且此资源又是个目录，那么 Puppet
不仅会部署目录自身，而且还会分发其中的所有内容（包括子目录及其文件）。
对于要在节点上部署目录树及其所有的文件来说，这是一个很好的方法。
也可以用这种方法使用一个单独的资源快速创建大量路径。

==== {Theresmore}

有时你要部署一些文件到一个已经存在的目录，但是首先要移除该目录下的所有没被
Puppet 管理的文件。 例如，Ubuntu 的 +/etc/apt/sources.list.d+ 目录下的文件，
你可能想要确保没有文件存在，即删除那些不是来自 Puppet 的文件。

+purge+ 参数可以为我们实现这个功能。在 Puppet 中定义如下的目录的 +file+ 资源：

----
file { "/etc/apt/sources.list.d":
    ensure  => directory,
    recurse => true,
    purge   => true,
}
----

联合使用 +recurse+ 和 +purge+ 将会移除 +/etc/apt/sources.list.d+ 
目录及其子目录下的所有不被 Puppet 管理的文件。
然后你就可以使用独立的 +file+ 资源将自己的文件部署到 +/etc/apt/sources.list.d+ 目录：

----
file { "/etc/apt/sources.list.d/bitfield.list":
    content => "deb http://packages.bitfieldconsulting.com/lucid-main\n",
}
----

如果有一个子目录，其中包含了你不想 +purge+ 的文件，
可以将此子目录作为 Puppet 的一个 +file+ 资源单独进行定义，
这样这个子目录中的内容就会保留：

----
file { "/etc/exim4/conf.d/acl":
    ensure => directory,
}
----

[NOTE]
============
要知道，至少在 Puppet 的当前实现中，采用递归方式复制文件相当慢而且会占用大量服务器的内存。
如果要部署的文件不经常改变，使用 tarball 进行部署比使用这种递归方式会更好。
============
