[[ch06sec05]]
=== Efficiently distributing cron jobs

When you have many servers executing the same cron job, it's usually a good idea not to run
them all at the same time. If all the jobs access a common server, it may put too much load
on that server, and even if they don't, all the servers will be busy at the same time, which may
affect their capacity to provide other services.

Puppet's +inline_template+ function allows us to use some Ruby logic to set different
runtimes for the job, depending on the hostname.

==== How to do it…

1. Add the following to a node:
+
----
define cron_random( $command, $hour )
{
  cron { $name:
    command => $command,
    minute  => inline_template("<%= (hostname+name).hash.abs %60 %>"),
    hour    => $hour,
    ensure  => "present",
  }
}

cron_random { "hello-world":
    command => "/bin/echo 'Hello world'",
    hour => 2,
}

cron_random { "hello-world-2":
    command => "/bin/echo 'Hello world'",
    hour => 1,
}
----

2. Run Puppet:
+
....
# puppet agent --test
info: Retrieving plugin
info: Caching catalog for cookbook.bitfieldconsulting.com
info: Applying configuration version '1305713506'
notice: /Stage[main]//Node[cookbook]/Cron_random[hello-world]/
Cron[hello-world]/ensure: created
notice: /Stage[main]//Node[cookbook]/Cron_random[hello-world-2]/
Cron[hello-world-2]/ensure: created
notice: Finished catalog run in 1.07 seconds
....

3. Check the `crontab` to see how the jobs have been configured:
+
....
# crontab -l
# HEADER: This file was autogenerated at Fri Jul 29 10:58:45 +0000
2011 by puppet.
# HEADER: While it can still be managed manually, it is definitely
not recommended.
# HEADER: Note particularly that the comments starting with
'Puppet Name' should
# HEADER: not be deleted, as doing so could cause duplicate cron
jobs.
# Puppet Name: hello-world
25 2 * * * /bin/echo 'Hello world'
# Puppet Name: hello-world-2
49 1 * * * /bin/echo 'Hello world'
....

==== How it works…

We want to choose a 'random' minute for each cron job; that is, not genuinely random (or it
would change every time Puppet runs), but more or less guaranteed to be different for each
cron job on each host.

We can do this by using Ruby's +hash+ method, which computes a numerical value from any
object, in this case a string. The value will be the same each time, so although the value
looks random, it will not change when Puppet runs again.

hash will generate a large integer, and we want values between 0 and 59, so we use the Ruby
+%+ (modulo) operator to restrict the result to this range. Although there are only 60 possible
values, the +hash+ function is designed to produce as uniform an output as possible, so there
should be very few collisions and the +minute+ values should be well-distributed.

We want the value to be different on different machines, so we use the hostname in
computing the +hash+ value. However, we also want the value to be different for different jobs
on the same machine, so we combine the hostname with the +name+ variable, which will be the
name of the cron job (+hello-world+, for example).

==== There's more…

In this example, we only randomized the +minute+ of the cron job, and supplied the +hour+ as
part of the definition. If you sometimes need to specify the day of the week as well, you could
add it as an optional parameter for +cron_random+ with a default value, shown as follows:

----
define cron_random( $command, $hour, $weekday = "*" ) {
----

If you also wanted to randomize the hour (for example, for jobs that could run at any time
of the day and need to be distributed across all 24 hours evenly) you could modify
+cron_random+ as follows:

----
hour => inline_template("<%= (hostname+name).hash.abs % 24 %>"),
----

==== See also

- <<ch01sec05,Running Puppet from cron>> in Chapter 1.
