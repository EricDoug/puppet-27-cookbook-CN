[[ch05sec06]]
=== {Recipe506}

大多数情况下，你会从发行版本的官方仓库安装软件包，所以使用简单的
+package+ 资源就可以做到：

[source,puppet]
----
package { "exim4": ensure => installed }
----

但是，有时你需要的软件包只能在第三方仓库（例如 **Ubuntu PPA**）中找到。
或者是第三方仓库提供的软件包版本比官方仓库中的软件包新。

对于手工管理的主机，你通常需要在安装软件包之前先添加仓库源配置到 +/etc/apt/sources.list.d+
（如果有必要，还应该导入仓库的 GPG 公钥）。我们可以很容易地使用 Puppet 自动完成这个过程。

==== {Howtodoit}

1. 添加如下代码到你的配置清单：
+
[source,puppet]
----
package { "python-software-properties": ensure => installed }

exec { "/usr/bin/add-apt-repository ppa:mathiaz/puppet-backports":
    creates => "/etc/apt/sources.list.d/mathiaz-puppet-backportslucid.
    list",
    require => Package["python-software-properties"],
}
----

2. 运行 Puppet：
+
....
# puppet agent --test
info: Retrieving plugin
info: Caching catalog for cookbook.bitfieldconsulting.com
info: Applying configuration version '1304773240'
notice: /Stage[main]//Node[cookbook]/Exec[/usr/bin/add-aptrepository
ppa:mathiaz/puppet-backports]/returns: executed
successfully
notice: Finished catalog run in 5.97 seconds
....

==== {Howitworks}

1. +python-software-properties+ 软件包提供了 `add-apt-repository` 命令，
   使用此命令可以简化添加额外的软件仓库源配置的过程：
+
[source,puppet]
----
package { "python-software-properties": ensure => installed }
----

2. 然后我们使用 +exec+ 资源调用这个命令添加要求的配置：
+
[source,puppet]
----
exec { "/usr/bin/add-apt-repository ppa:mathiaz/puppet-backports":
----

3. 确保 Puppet 不会在每次运行时都执行这个 +exec+ 资源，我们指定了一个由此命令创建的文件，
   如果此文件已经存在，则 Puppet 就会忽略 +exec+ 资源的执行：
+
--
[source,puppet]
----
creates => "/etc/apt/sources.list.d/mathiaz-puppet-backports-lucid.list",
----

你可能想要将这个内容与清除 +/etc/apt/sources.list.d+ 中不需要的仓库定义相结合，
正如本书 <<ch06sec09,{Recipe609}>> 一节中所描述的。
--

==== {Theresmore}

这种处理仓库的方法是针对 Debian 和 Ubuntu 系统的，我们之前说过，这是本书使用的参考平台。
如果你使用的是基于 Red Hat 的系统，你可以直接使用 +yumrepo+ 资源管理 RPM 仓库。

==== {Seealso}

- 第 6 章的 <<ch06sec09,{Recipe609}>> 一节
