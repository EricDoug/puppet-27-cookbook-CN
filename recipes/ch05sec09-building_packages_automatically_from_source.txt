[[ch05sec09]]
=== Building packages automatically from source

Tarballs can seriously damage your health. While using a *distro* or third-party package, or
rolling your own package is always preferable to building software from source, sometimes it
has to be done. Creating Debian packages (or any other flavor of packages) can be a lengthy
and error-prone process, and there may not always be the time or budget available to do this.

If you have to build a program from source, Puppet can at least help with this process. The
general procedure is to automate what you would otherwise do manually:

- Download the source *tarball*
- Unpack the tarball
- Configure and build the program
- Install the program

In this example we'll build *OpenSSL* from source (though for production you should use the
distro package, but it makes a useful demonstration).

==== How to do it…

1. Add the following to your manifest:
+
----
exec { "build-openssl":
    cwd => "/root",
    command => "/usr/bin/wget ftp://ftp.openssl.org/source/
     openssl-0.9.8p.tar.gz && /bin/tar xvzf openssl-0.9.8p.tar.
     gz && cd openssl-0.9.8p && ./Configure linux-generic32 &&
     make install",
    creates => "/usr/local/ssl/bin/openssl",
    logoutput => on_failure,
    timeout => 0,
}
----

2. Run Puppet (it may take a while!):
+
....
# puppet agent --test
info: Retrieving plugin
info: Caching catalog for cookbook.bitfieldconsulting.com
info: Applying configuration version '1304954159'

notice: /Stage[main]//Node[cookbook]/Exec[build-openssl]/returns:
executed successfully

notice: Finished catalog run in 554.00 seconds
....


==== How it works…

The +exec+ command is in five separate stages, delimited by +&&+ operators. This means that
should any sub-command fail, the whole command will stop and fail. It's a useful construct
where you want to make sure each sub-command has succeeded before going on to the next.

1. The first stage downloads the source tarball:
+
....
/usr/bin/wget ftp://ftp.openssl.org/source/openssl-0.9.8p.tar.gz
....

2. The second stage unpacks it:
+
....
/bin/tar xvzf openssl-0.9.8p.tar.gz
....

3. The third stage changes working directory to the source tree:
+
....
cd openssl-0.9.8p
....

4. The fourth stage runs the configure script (this is usually where you will need to
   specify any options or customizations):
+
....
./Configure linux-generic32
....

5. The final stage builds and installs the software:
+
....
make install
....

6. So that this lengthy process isn't run every time Puppet runs, we specify a file that the
   build creates:
+
--
....
creates => "/usr/local/ssl/bin/openssl",
....

If you need to force a rebuild for whatever reason, remove this file.
--

7. Things don't always compile first time. In case of problems, we specify the +logoutput+
   parameter which will show us what the build process is complaining about:
+
----
    logoutput => on_failure,
----

8. Finally, because the compilation may take a while, we set a zero +timeout+ parameter
   (Puppet times out +exec+ commands after 5 minutes by default):
+
----
    timeout => 0,
----

==== There's more…

If you have to build quite a few packages from source, it may be worth converting the
preceding recipe into a +define+ function, so that you can use more or less the same
code to build each package.
