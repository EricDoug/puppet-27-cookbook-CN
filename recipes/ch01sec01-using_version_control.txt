[[ch01sec01]]
=== {Recipe101}

[quote, Doug Gwyn,]
Unix was not designed to stop you from doing stupid things, because that would
also stop you from doing clever things.

你曾经遇到过误删除了某些文件而又希望恢复的情形吧？ 本书中提及的最重要的技巧就是将 Puppet 的
配置清单（manifests）纳入像 Git 或 Subversion 这样的 **版本控制系统（Version Control System，VCS）**。
直接在 *Puppetmaster* 上编辑配置清单并非明智之举，因为在你还没确信应用这些更改之前可能已经被应用。
Puppet 会自动检测配置清单的变化，因此可能会将配置清单的半成品应用到客户端。 这可是个令人讨厌的结果。

取而代之的正确做法是：使用 VCS （我推荐 Git）并从一个版本仓库导出（checkout） Puppetmaster 上所需的
+/etc/puppet+ 目录内容。这样做有如下好处：

- 你不用担心 Puppet 会应用未完成的配置清单
- 你可以撤消更改，并将配置清单恢复到以前的任何版本
- 你可以使用分支（branch）来尝试使用新功能，而不会影响到生产线上使用的主版本（master version）
- 如果多个人需要修改配置清单，他们可以彼此独立的工作，修改他们自己的工作副本，之后合并（merge）他们的改动
- 你可以使用日志来查看何时，何人改动了什么

==== {Gettingready}

你需要一个运行 Puppetmaster 的主机并且配置清单文件集存放在 +/etc/puppet+ 目录。
如果你还没有准备好这些，可以参考 Puppet 文档（http://docs.puppetlabs.com/[]）：
如何安装 Puppet（http://docs.puppetlabs.com/guides/installation.html[]）以及如何建立自己的第一个配置清单
（http://docs.puppetlabs.com/guides/setting_up.html[]）。

然后将你的配置清单纳入版本控制，可以从 Pupppetmaster 上的 +/etc/puppet+ 目录导入到版本控制系统中,
并使用它作为工作副本。在本例中，我们将使用一个 *GitHub* 账号存储 Puppet 的所有配置。

你需要一个 GitHub 账号（可以免费注册）和并创建一个仓库。跟随
http://www.github.com[www.github.com] 的指示去创建一个吧。

[NOTE]
.译者注
============================
可以参考 http://www.worldhello.net/[蒋鑫] 撰写的 http://www.worldhello.net/gotgithub/[GotGitHub]
学习 GitHub 的使用。
============================

[TIP]
================
你可以使用你的账号从 http://www.PacktPub.com[] 下载你购买的 Packt 出版的所有书籍的案例代码文件。
如果你从其他地方购买了本书，你可以访问 http://www.PacktPub.com/support[] ，
注册并直接从 e-mail 获得案例代码文件。
================

==== {Howtodoit}

1. 将 Puppetmaster 上的 +/etc/puppet+ 目录纳入一个 Git 仓库，执行如下命令:
+
..................
root@cookbook:/etc/puppet# git init
Initialized empty Git repository in /etc/puppet/.git/
root@cookbook:/etc/puppet# git add manifests/ modules/
root@cookbook:/etc/puppet# git commit -m "initial commit"
[master (root-commit) c7a24cf] initial commit
 59 files changed, 1790 insertions(+), 0 deletions(-)
 create mode 100644 manifests/site.pp
 create mode 100644 manifests/utils.pp
...
..................

2. 关联你的 GitHub 仓库并执行推送（push）:
+
..................
# git push -u origin master
Counting objects: 91, done.
Compressing objects: 100% (69/69), done.
Writing objects: 100% (91/91), 21.07 KiB, done.
Total 91 (delta 4), reused 0 (delta 0)
To git@github.com:bitfield/puppet-demo.git
 * [new branch] master -> master
..................
+
分支 master 设置为从 origin 跟踪远程分支 masters。

==== {Howitworks}

你已经在 GitHub 上创建了一个 “master” **仓库（repository）**（通常简写为 **repo**），
它包含了你的 Puppet 配置清单。
你可以在不同的地方导出多个副本，提交变更之前在这些副本上工作。
例如, 如果你有一个系统管理员的团队，他们每个人都可以在他们自己的本地仓库副本上工作。

Puppetmaster 上的 +/etc/puppet+ 目录仅是从属于 GitHub 仓库的另外一个工作副本。
当你决定要在 +/etc/puppet+ 的工作副本上应用 GitHub 仓库上的变更时，
你可以更新这个本地副本，从 GitHub 仓库上获取（pull）最近的变更。

==== {Theresmore}

既然已经配置了版本控制，你就可以使用如下的工作流程编辑你的 Puppet 配置清单了：

1. 使用自己偏爱的文本编辑器在你自己的工作副本上修改 Puppet 配置清单。
+
--
例如：在我的笔记本电脑上自己的工作副本上添加新的配置清单文件（或做一些编辑工作）：

..........................
john@laptop:~$ cd puppet-work
john@laptop:~/puppet-work$ mkdir manifests
john@laptop:~/puppet-work$ touch manifests/nodes.pp
john@laptop:~/puppet-work$ git add manifests/nodes.pp
..........................
--

2. 提交（commit）变更并推送（push）变更至 GitHub 仓库。
+
..........................
john@laptop:~/puppet-work$ git commit -m "adding nodes.pp"
[master 5c7b94c] adding nodes.pp
 0 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 manifests/nodes.pp
john@laptop:~/puppet-work$ git push
Counting objects: 7, done.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 409 bytes, done.
Total 4 (delta 1), reused 0 (delta 0)
To git@github.com:bitfield/puppet-demo.git
    c7a24cf..b74d452 master -> master
..........................

3. 使用 `git pull` 从 Github 仓库更新 Puppetmaster 上的工作副本。
+
..........................
root@cookbook:/etc/puppet# git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 4 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (4/4), done.
From git@github.com:bitfield/puppet-demo.git
    26d668c..5c7b94c master -> origin/master
Updating 26d668c..5c7b94c
Fast-forward
0 files changed, 0 insertions(+), 0 deletions(-)
create mode 100644 manifests/nodes.pp
..........................

你可以使用像 *Rake* 这样的工具实现这一过程的自动化。

==== {Seealso}

- 本章的 <<ch01sec03,{Recipe103}>> 一节
- 本章的 <<ch01sec10,{Recipe110}>> 一节
- 本章的 <<ch01sec02,{Recipe102}>> 一节
