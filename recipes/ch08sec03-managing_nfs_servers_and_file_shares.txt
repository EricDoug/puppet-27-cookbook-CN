[[ch08sec03]]
=== {Recipe803}

[quote, Guy Almes,]
There are three kinds of death in this world. There's heart death, there's brain
death, and there's being off the network.

网络文件系统（**Network File System**，**NFS**）是一种从远程服务器挂装共享目录的方法。
例如：一批 web 服务器可以挂装同一个 NFS 共享为客户供应静态资产文件，比如图片文件和 CSS 文件。
尽管 NFS 是一种比较旧的技术，但它仍被广泛使用着，
所以本处方将向你展示如何创建一个 NFS 服务器以及如何通过它来共享文件。

==== {Howtodoit}

1. 创建一个 +nfs+ 模块：
+
....
# mkdir /etc/puppet/modules/nfs
# mkdir /etc/puppet/modules/nfs/manifests
....

2. 使用如下内容创建 +/etc/puppet/modules/nfs/manifests/init.pp+ 文件：
+
----
class nfs {
    package { "nfs-kernel-server": ensure => installed }

    service { "nfs-kernel-server":
        ensure     => running,
        enable     => true,
        hasrestart => true,
        require    => Package["nfs-kernel-server"],
    }

    file { "/etc/exports.d":
        ensure => directory,
    }

    exec { "update-etc-exports":
        command     => "/bin/cat /etc/exports.d/* >/etc/exports",
        notify      => Service["nfs-kernel-server"],
        refreshonly => true,
    }

    define share( $path, $allowed, $options = "" ) {
        include nfs
        file { $path:
            ensure => directory,
        }

        file { "/etc/exports.d/${name}":
            content => "${path} ${allowed}(${options})\n",
            notify  => Exec["update-etc-exports"],
        }
    }
}
----

3. 在你需要输出 NFS 共享的节点上添加如下代码（修改 IP 地址范围以适应你的网络）：
+
----
nfs::share { "data":
    path    => "/data",
    allowed => "10.0.2.0/24",
    options => "rw,sync,no_root_squash",
}

nfs::share { "data2":
    path    => "/data2",
    allowed => "10.0.2.0/24",
    options => "rw,sync,no_root_squash",
}
----

4. 运行 Puppet：
+
....
# puppet agent --test
info: Retrieving plugin
info: Caching catalog for cookbook.bitfieldconsulting.com
info: Applying configuration version '1311526219'
notice: /Stage[main]/Nfs/Package[nfs-kernel-server]/ensure:

created
notice: /Stage[main]/Nfs/Service[nfs-kernel-server]/ensure: ensure
changed 'stopped' to 'running'

notice: /Stage[main]//Node[cookbook]/Nfs::Share[data2]/File[/
data2]/ensure: created

notice: /Stage[main]//Node[cookbook]/Nfs::Share[data2]/File[/etc/
exports.d/data]/ensure: defined content as '{md5}408f8b40815ff4b6e
ec2f324ca7eafc4'

info: /Stage[main]//Node[cookbook]/Nfs::Share[data]/File[/etc/
exports.d/data]: Scheduling refresh of Exec[update-etc-exports]

notice: /Stage[main]//Node[cookbook]/Nfs::Share[data2]/
File[/etc/exports.d/data2]/ensure: defined content as '{md5}
ec2f324ca7eafc4408f8b40815ff4b6e'

info: /Stage[main]//Node[cookbook]/Nfs::Share[data2]/File[/etc/
exports.d/data2]: Scheduling refresh of Exec[update-etc-exports]

notice: /Stage[main]/Nfs/Exec[update-etc-exports]: Triggered
'refresh' from 2 events

info: /Stage[main]/Nfs/Exec[update-etc-exports]: Scheduling
refresh of Service[nfs-kernel-server]

notice: /Stage[main]/Nfs/Service[nfs-kernel-server]/ensure: ensure
changed 'stopped' to 'running'

notice: /Stage[main]/Nfs/Service[nfs-kernel-server]: Triggered
'refresh' from 1 events

notice: Finished catalog run in 3.13 seconds
....

5. 通过在另一个服务器上挂装共享测试 NFS 的输出配置：
+
....
# mkdir /mnt/data
# mount cookbook:/data /mnt/data
# ls /mnt/data
....

==== {Howitworks}

+nfs+ 类用于安装并启动 +nfs-kernel-server+ 服务，此服务监听网络文件共享的连接。
还定义了一个 +nfs::share+ 资源，你可以在配置清单中的任何位置使用它输出一个 NFS 目录：

----
nfs::share { "data":
    path    => "/data",
    allowed => "10.0.2.0/24",
    options => "rw,sync,no_root_squash",
}
----

此资源的名字是任何你想要给出的一个标签：本例中为 ++data++。++path++ 用于指定要共享的目录。
+allowed+ 参数可以使用一个 CIDR 网络地址（正向本例中的 ++10.0.2.0/24++）、
一个 IP 地址、一个主机名或一个用空格间隔的 IP 地址或主机名列表。
NFS 服务器仅允许由指定的主机远程挂装此资源。

+options+ 参数用于指定 NFS 的挂装选项（这些参数将出现在 +/etc/exports+ 文件中，
可使用命令 `man exports` 查看这些选项的精确细节）。

请注意，我们使用了与 +rsyncd.conf+ 例子相同的片断模式。
+nfs::share+ 的任何一个实例都会创建 +/etc/exports.d+ 目录下的一个配置文件片段，
这会触发一个 +exec+ 资源将所有的配置文件片段串连成一个 +/etc/exports+
配置文件并通知 NFS 服务应用配置的改变。

==== {Theresmore}

NFS 共享只能应用于应用程序的非关键性数据，因为 NFS 服务器会造成单点故障。
你可以使用集群文件系统解决关键性数据的共享, 应该考虑使用 GlusterFS 替代 NFS。
